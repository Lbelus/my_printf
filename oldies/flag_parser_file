#include <stdbool.h>
#include <stdlib.h>

#ifndef struct_flag_parser
#define struct_flag_parser

typedef struct Flag_parser_struct {
    int SIZE;
    char **flags;
    int *logic_gate_array;
} fps;
#endif


// feed struct "nomnomnom"; store flags and possible combination and create corresponding number of gates

fps* identify_flag(int n, char** flag_param){

    fps* fps_pointer = malloc(sizeof(*fps_pointer));
    fps_pointer->SIZE = n;
    fps_pointer->flags= malloc(sizeof(fps_pointer->SIZE));
    fps_pointer->logic_gate_array= malloc(sizeof(fps_pointer->SIZE));

    int i = 0;
    for(int y = 2; y < n; y++){
        i++;
            for(int x = 0; flag_param[i][x] != '\0'; x++ ){
                fps_pointer->flags[i][x] = flag_param[i][x];
                fps_pointer->logic_gate_array[i] = i;
            }            
        }
    return fps_pointer;
}

int* logic_gate(fps* struct_pointer, int argc, char** argv){
    int* order = 0;
    order = malloc(sizeof(int)*argc);
    for(int y = 0; y < struct_pointer->SIZE;y++){
        for(int x = 1; x < argc; x++){
            if(struct_pointer->flags[y] == argv[x]){
                order[y] = struct_pointer->logic_gate_array[y]; 
            }
        }
    }    
    return order;
}


int main(int argc, char** argv){

    int i = 0;
    for(int y = 2; y < argc; y++){
        i++;
        if(argv[i][0] == '-'){
            for(int x = 1; argv[i][x] != '\0'; x++ ){
                char flag = argv[i][x];
                switch(flag){
                case 't':
                break;
                case 'c': 
                break;
                }
            }            
        }
    }


}